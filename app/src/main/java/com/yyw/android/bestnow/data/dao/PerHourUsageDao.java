package com.yyw.android.bestnow.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yyw.android.bestnow.data.dao.PerHourUsage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PER_HOUR_USAGE".
*/
public class PerHourUsageDao extends AbstractDao<PerHourUsage, Long> {

    public static final String TABLENAME = "PER_HOUR_USAGE";

    /**
     * Properties of entity PerHourUsage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property FormatTime = new Property(3, String.class, "formatTime", false, "FORMAT_TIME");
        public final static Property LaunchCount = new Property(4, Integer.class, "launchCount", false, "LAUNCH_COUNT");
        public final static Property UsageTime = new Property(5, Long.class, "usageTime", false, "USAGE_TIME");
    };


    public PerHourUsageDao(DaoConfig config) {
        super(config);
    }
    
    public PerHourUsageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PER_HOUR_USAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PACKAGE_NAME\" TEXT," + // 1: packageName
                "\"TIME\" INTEGER," + // 2: time
                "\"FORMAT_TIME\" TEXT," + // 3: formatTime
                "\"LAUNCH_COUNT\" INTEGER," + // 4: launchCount
                "\"USAGE_TIME\" INTEGER);"); // 5: usageTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PER_HOUR_USAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PerHourUsage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String formatTime = entity.getFormatTime();
        if (formatTime != null) {
            stmt.bindString(4, formatTime);
        }
 
        Integer launchCount = entity.getLaunchCount();
        if (launchCount != null) {
            stmt.bindLong(5, launchCount);
        }
 
        Long usageTime = entity.getUsageTime();
        if (usageTime != null) {
            stmt.bindLong(6, usageTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PerHourUsage readEntity(Cursor cursor, int offset) {
        PerHourUsage entity = new PerHourUsage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // formatTime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // launchCount
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // usageTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PerHourUsage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFormatTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLaunchCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUsageTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PerHourUsage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PerHourUsage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
